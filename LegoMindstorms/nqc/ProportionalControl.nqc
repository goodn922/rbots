// bugbot3.nqc - using multiple tasks

// sensors
#define LTurn SENSOR_1
#define RTurn SENSOR_3

// motors
#define LEFT OUT_A
#define RIGHT OUT_C
#define RIGHT_INITIAL  5
#define LEFT_INITIAL   2
// timer runs at 10 Hz, so a timer_limit of 10 is 1 second
#define TIMER_LIMIT   1
#define COUNTER_LIMIT 6         
#define INITIAL_SPREAD 6           
// circumference of the wheels in (10 inches) divided by 2
#define  CIRCUMFERENCE 26
// diameter of wheel in inches
#define DIAMETER 3.25

// controller proportional constant
#define KP 5
// controller integral constant
#define KI 1

int counter;
int distance;
int angle;
int outFlag = 1;
int x;
int spread;
int temp1;
int temp2;
int sum=0;


task main()
{

  
  
  spread = INITIAL_SPREAD;
  
	// configure the sensors
	SetSensorType(LTurn,SENSOR_TYPE_ROTATION);
	SetSensorType(RTurn,SENSOR_TYPE_ROTATION);
	SetSensorMode(LTurn,SENSOR_MODE_ROTATION);
	SetSensorMode(RTurn,SENSOR_MODE_ROTATION);
	

	SetPower(    LEFT, 1);
  SetPower(    RIGHT, 7);
  SetOutput(   LEFT, OUT_ON);
  SetOutput(   RIGHT, OUT_ON);
  Rev(RIGHT);


	counter = 0;	

	//CreateDatalog(1700);

	// start going forward
	//Fwd(RIGHT);
	//Fwd(LEFT);

	start watch_timer;
	//start IndianaJones;
	//AddToDatalog(Timer(0));
	ClearSensor(LTurn);
  ClearSensor(RTurn);
	
	
	  
  // go straight 
  while(outFlag)
  {
  
    //distance = (LTurn + RTurn)*CIRCUMFERENCE;
    distance = (LTurn + RTurn);
	  angle = (LTurn - RTurn);
	  // scale distance check by 2 so we dont have to divide by 2 for
	  // distance calculation
    if (distance >= 2300)
    {
      // Once we get to desired distance brake (turn off motors)
      Off(RIGHT);
		  Off(LEFT);
      outFlag=0;
    }
    else
    {
      // determine power level to send to motors based on Proportional 
      // controller
      
      x  = INITIAL_SPREAD+KP*angle + KI*sum/30;
      if(x!=spread){
             // adjust the spread by the correction, x.  then use
             // the spread to compute power levels.  The logic for
             // a positive spread and a negative spread is largely
             // symmetric.  In the case where the spread is an odd number
             // (spread&1 is true), increment the fast wheel by 1 power step.
             spread=x;
             if(spread<0){
                if(spread<-7)
                   spread = -7;
                temp1 = 3-spread/2;
                temp2 = 3+spread/2;
                if(spread&1)
                    temp1++;
             }else{
                if(spread>7)
                  spread = 7;
                temp1 = 3-spread/2;
                temp2 = 3+spread/2;
                if(spread&1)
                    temp2++;
             }
             SetPower(LEFT, temp1);
             SetPower(RIGHT, temp2);

             Rev(RIGHT);
		         Fwd(LEFT);
    }
  
  
  }
  }
  }
task watch_timer()
{
	while(true)
	{
		until(Timer(0) > TIMER_LIMIT);
		//PlayTone(440, 10);
		sum += angle/10;
		//AddToDatalog(LTurn);
		//AddToDatalog(RTurn);
		//AddToDatalog(distance);
		ClearTimer(0);
		//ClearSensor(LTurn);
		//ClearSensor(RTurn);
		//counter=0;
	}
}
		

		
// Indiana Jones Theme
task IndianaJones()
{

  while(true)
  {
  PlayTone(330,17);
  Wait(29);
  PlayTone(349,8);
  Wait(10);
  PlayTone(392,8);
  Wait(20);
  PlayTone(523,88);
  Wait(101);
  PlayTone(294,17);
  Wait(30);
  PlayTone(330,7);
  Wait(10);
  PlayTone(349,107);
  Wait(119);
  PlayTone(392,18);
  Wait(30);
  PlayTone(440,8);
  Wait(10);
  PlayTone(494,8);
  Wait(20);
  PlayTone(698,88);
  Wait(100);
  PlayTone(440,18);
  Wait(30);
  PlayTone(494,8);
  Wait(10); 
  PlayTone(523,38);
  Wait(40);
  PlayTone(587,38);
  Wait(40);
  PlayTone(659,18);  

  }

  }
